/*
 * Copyright (C) 2020 The Arrow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

kotlin {
    explicitApi()
    jvm {
        // JVM target ignores Java sources and compiles only Kotlin source files.
        // Fix:
        withJava()

        compilations.all {
            kotlinOptions {
                freeCompilerArgs += ["-Xskip-runtime-version-check"]
                jvmTarget = "1.8"
            }
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
    js(BOTH) {
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }
        nodejs {
            testTask {
                useMocha {
                    timeout = "600000"
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                compileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:$KOTLIN_VERSION"
            }
        }
        jvmMain {
            dependencies {
                compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"
            }
        }
        jvmTest {
            dependencies {
                runtimeOnly "io.kotest:kotest-runner-junit5:$KOTEST_VERSION"
            }
        }
        jsMain {
            dependencies {
                compileOnly "org.jetbrains.kotlin:kotlin-stdlib-js:$KOTLIN_VERSION"
            }
        }
        jsTest {
            dependencies {
                implementation "io.kotest:kotest-framework-engine:$KOTEST_VERSION"

            }
        }
    }
}

ktlint {
    version = KTLINT_VERSION
}

clean.doFirst {
    delete "${projectDir}/docs/apidocs"
}

group = GROUP
archivesBaseName = POM_ARTIFACT_ID

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

tasks.jvmTest{
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
